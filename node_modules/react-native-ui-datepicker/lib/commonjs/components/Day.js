"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EmptyDay = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _enums = require("../enums");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function EmptyDayPure() {
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.dayCell
  });
}
const EmptyDay = exports.EmptyDay = /*#__PURE__*/_react.default.memo(EmptyDayPure);
const Day = ({
  date,
  text,
  disabled,
  isCurrentMonth,
  isToday,
  isSelected,
  onSelectDate,
  theme
}) => {
  const dayContainerStyle = isCurrentMonth ? theme === null || theme === void 0 ? void 0 : theme.dayContainerStyle : {
    opacity: 0.3
  };
  const todayItemStyle = isToday ? {
    borderWidth: 2,
    borderColor: (theme === null || theme === void 0 ? void 0 : theme.selectedItemColor) || '#0047FF',
    ...(theme === null || theme === void 0 ? void 0 : theme.todayContainerStyle)
  } : null;
  const activeItemStyle = isSelected ? {
    borderColor: (theme === null || theme === void 0 ? void 0 : theme.selectedItemColor) || '#0047FF',
    backgroundColor: (theme === null || theme === void 0 ? void 0 : theme.selectedItemColor) || '#0047FF'
  } : null;
  const textStyle = isSelected ? {
    color: '#fff',
    ...(theme === null || theme === void 0 ? void 0 : theme.selectedTextStyle)
  } : isToday ? {
    ...(theme === null || theme === void 0 ? void 0 : theme.calendarTextStyle),
    color: (theme === null || theme === void 0 ? void 0 : theme.selectedItemColor) || '#0047FF',
    ...(theme === null || theme === void 0 ? void 0 : theme.todayTextStyle)
  } : theme === null || theme === void 0 ? void 0 : theme.calendarTextStyle;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.dayCell
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    disabled: disabled,
    onPress: () => onSelectDate(date),
    style: [styles.dayContainer, dayContainerStyle, todayItemStyle, activeItemStyle, disabled && styles.disabledDay],
    testID: date,
    accessibilityRole: "button",
    accessibilityLabel: text
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.dayTextContainer
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: textStyle
  }, text))));
};
const styles = _reactNative.StyleSheet.create({
  dayCell: {
    width: '14.2%',
    height: _enums.CALENDAR_HEIGHT / 7 - 1
  },
  dayContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    margin: 1.5,
    borderRadius: 100
  },
  dayTextContainer: {
    justifyContent: 'center',
    alignItems: 'center'
  },
  disabledDay: {
    opacity: 0.3
  }
});
var _default = exports.default = /*#__PURE__*/_react.default.memo(Day);
//# sourceMappingURL=Day.js.map